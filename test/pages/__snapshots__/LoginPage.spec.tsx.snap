// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<LoginPage /> should render 'fetching...' 1`] = `
<p>
  Fetching...
</p>
`;

exports[`<LoginPage /> should render Login page 1`] = `
<LoginPage
  history={
    Object {
      "action": "POP",
      "block": [Function],
      "createHref": [Function],
      "go": [Function],
      "goBack": [Function],
      "goForward": [Function],
      "length": 2,
      "listen": [Function],
      "location": Object {
        "hash": "",
        "key": "",
        "pathname": "",
        "search": "",
        "state": Object {},
      },
      "push": [Function],
      "replace": [Function],
    }
  }
  isAuthenticated={false}
  isFetching={false}
  location={
    Object {
      "hash": "",
      "key": "",
      "pathname": "",
      "search": "",
      "state": Object {},
    }
  }
  loginUser={[MockFunction]}
  match={
    Object {
      "isExact": true,
      "params": null,
      "path": "",
      "url": "",
    }
  }
  name="test"
  navigateToDashBoard={[MockFunction]}
  staticContext={Object {}}
>
  <main
    className="main main--full tms-grid-3-container"
  >
    <HelmetWrapper
      defer={true}
      encodeSpecialCharacters={true}
    >
      <SideEffect(NullComponent)
        defer={true}
        encodeSpecialCharacters={true}
        title="Login | TMS"
        titleAttributes={Object {}}
      >
        <NullComponent
          defer={true}
          encodeSpecialCharacters={true}
          title="Login | TMS"
          titleAttributes={Object {}}
        />
      </SideEffect(NullComponent)>
    </HelmetWrapper>
    <div
      className="login-main tms-grid--offset1 tms-grid--col1 tms-grid-sm--col3"
    >
      <h1>
        Sign in to TMS
      </h1>
      <p>
        Enter your 
        <strong>
          user name
        </strong>
         and 
        <strong>
          password
        </strong>
        .
      </p>
      <ReactForm
        onSubmit={[Function]}
      >
        <Connect(Form)
          onSubmit={[Function]}
          store={
            Object {
              "dispatch": [Function],
              "getState": [Function],
              "replaceReducer": [Function],
              "subscribe": [Function],
              Symbol(observable): [Function],
            }
          }
        >
          <Form
            defaultValues={Object {}}
            dispatch={[Function]}
            formState={
              Object {
                "asyncErrors": undefined,
                "asyncSuccesses": undefined,
                "asyncValidations": 0,
                "asyncWarnings": undefined,
                "errors": undefined,
                "submits": 1,
                "submitted": false,
                "submitting": true,
                "successes": undefined,
                "touched": Object {},
                "validating": undefined,
                "validationFailed": undefined,
                "validationFailures": 0,
                "values": Object {},
                "warnings": undefined,
              }
            }
            onSubmit={[Function]}
            preventDefault={true}
            pure={true}
            store={
              Object {
                "dispatch": [Function],
                "getState": [Function],
                "replaceReducer": [Function],
                "subscribe": [Function],
                Symbol(observable): [Function],
              }
            }
            storeSubscription={
              Subscription {
                "listeners": Object {
                  "clear": [Function],
                  "get": [Function],
                  "notify": [Function],
                  "subscribe": [Function],
                },
                "onStateChange": [Function],
                "parentSub": undefined,
                "store": Object {
                  "dispatch": [Function],
                  "getState": [Function],
                  "replaceReducer": [Function],
                  "subscribe": [Function],
                  Symbol(observable): [Function],
                },
                "unsubscribe": [Function],
              }
            }
          >
            <div
              className="tms-panel"
            >
              <form
                onSubmit={[Function]}
              >
                <div
                  className="tms-textfield"
                >
                  <ConnectedField
                    field="username"
                    id="username"
                    maxLength={30}
                    placeholder="John Doe"
                    required={true}
                  >
                    <Field
                      component={[Function]}
                      field="username"
                      id="username"
                      maxLength={30}
                      placeholder="John Doe"
                      pure={true}
                      required={true}
                    >
                      <TextWrapper
                        fieldApi={
                          Object {
                            "addValue": [Function],
                            "asyncValidate": [Function],
                            "doneValidatingField": [Function],
                            "error": undefined,
                            "fieldName": "username",
                            "preValidate": [Function],
                            "removeValue": [Function],
                            "reset": [Function],
                            "setError": [Function],
                            "setSuccess": [Function],
                            "setTouched": [Function],
                            "setValue": [Function],
                            "setWarning": [Function],
                            "success": undefined,
                            "swapValues": [Function],
                            "touched": undefined,
                            "validate": [Function],
                            "validatingField": [Function],
                            "value": undefined,
                            "warning": undefined,
                          }
                        }
                        id="username"
                        maxLength={30}
                        placeholder="John Doe"
                        required={true}
                      >
                        <input
                          id="username"
                          maxLength={30}
                          onBlur={[Function]}
                          onChange={[Function]}
                          placeholder="John Doe"
                          required={true}
                          value=""
                        />
                      </TextWrapper>
                    </Field>
                  </ConnectedField>
                  <label
                    htmlFor="username"
                  >
                    UserName
                  </label>
                </div>
                <div
                  className="tms-textfield"
                >
                  <ConnectedField
                    field="password"
                    id="password"
                    maxLength={30}
                    placeholder="Your password"
                    required={true}
                    type="password"
                  >
                    <Field
                      component={[Function]}
                      field="password"
                      id="password"
                      maxLength={30}
                      placeholder="Your password"
                      pure={true}
                      required={true}
                      type="password"
                    >
                      <TextWrapper
                        fieldApi={
                          Object {
                            "addValue": [Function],
                            "asyncValidate": [Function],
                            "doneValidatingField": [Function],
                            "error": undefined,
                            "fieldName": "password",
                            "preValidate": [Function],
                            "removeValue": [Function],
                            "reset": [Function],
                            "setError": [Function],
                            "setSuccess": [Function],
                            "setTouched": [Function],
                            "setValue": [Function],
                            "setWarning": [Function],
                            "success": undefined,
                            "swapValues": [Function],
                            "touched": undefined,
                            "validate": [Function],
                            "validatingField": [Function],
                            "value": undefined,
                            "warning": undefined,
                          }
                        }
                        id="password"
                        maxLength={30}
                        placeholder="Your password"
                        required={true}
                        type="password"
                      >
                        <input
                          id="password"
                          maxLength={30}
                          onBlur={[Function]}
                          onChange={[Function]}
                          placeholder="Your password"
                          required={true}
                          type="password"
                          value=""
                        />
                      </TextWrapper>
                    </Field>
                  </ConnectedField>
                  <label
                    htmlFor="password"
                  >
                    Password
                  </label>
                </div>
                <button
                  className="tms-btn primary block"
                >
                  SIGN IN
                </button>
              </form>
            </div>
          </Form>
        </Connect(Form)>
      </ReactForm>
    </div>
  </main>
</LoginPage>
`;
