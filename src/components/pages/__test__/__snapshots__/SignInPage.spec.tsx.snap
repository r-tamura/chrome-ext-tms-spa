// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<SignInPage /> should render 'Fetching...' 1`] = `
<p>
  Fetching...
</p>
`;

exports[`<SignInPage /> should render Login page 1`] = `
<Component>
  <ThemeProvider
    theme={
      Object {
        "black": "rgb(5, 5, 5)",
        "buttonDefault": "rgba(0, 0, 0, 0.08)",
        "danger": "#D32F2F",
        "fontFamily": "\\"M PLUS Rounded 1c\\", sans-serif",
        "formBorderColor": "rgba(0, 0, 0, 0.16)",
        "formBorderColorDisabled": "rgba(0, 0, 0, 0.08)",
        "formBorderColorError": "#D32F2F",
        "formBorderColorFocused": "hsl(206, 100%, 31%)",
        "hoveredBg": "rgba(0, 0, 0, 0.03)",
        "inputPlaceHolder": "rgba(0, 0, 0, 0.09)",
        "primary": "hsl(206, 100%, 31%)",
        "primaryDark": "hsl(208, 80%, 27%)",
        "primaryHeavyDark": "hsl(208, 80%, 27%)",
        "primaryHeavyLight": "hsl(199, 91%, 64%);",
        "primaryLight": "hsl(201, 98%, 41%);",
        "primaryReverse": "hsla(0, 0%, 99%, 1);",
        "primaryReverseDark": "hsla(0, 0%, 99%, 0.5);",
        "secondary": "#689F38",
        "textGray": "hsla(0, 5%, 5%, .25)",
        "textMain": "hsl(0, 5%, 5%)",
        "white": "rgb(253, 253, 253)",
      }
    }
  >
    <Component>
      <styled.main
        className="app-content-full"
      >
        <StyledComponent
          className="app-content-full"
          forwardedComponent={
            Object {
              "$$typeof": Symbol(react.forward_ref),
              "attrs": Array [],
              "componentStyle": ComponentStyle {
                "componentId": "sc-VigVT",
                "isStatic": true,
                "lastClassName": "feDDAr",
                "rules": Array [
                  "
  align-self: center;
  justify-self: center;
",
                ],
              },
              "displayName": "styled.main",
              "foldedComponentIds": Array [],
              "render": [Function],
              "styledComponentId": "sc-VigVT",
              "target": "main",
              "toString": [Function],
              "warnTooManyClasses": [Function],
              "withComponent": [Function],
            }
          }
          forwardedRef={null}
        >
          <main
            className="app-content-full sc-VigVT feDDAr"
          >
            <HelmetWrapper
              defer={true}
              encodeSpecialCharacters={true}
            >
              <SideEffect(NullComponent)
                defer={true}
                encodeSpecialCharacters={true}
                title="Sign In | TMS"
                titleAttributes={Object {}}
              >
                <NullComponent
                  defer={true}
                  encodeSpecialCharacters={true}
                  title="Sign In | TMS"
                  titleAttributes={Object {}}
                />
              </SideEffect(NullComponent)>
            </HelmetWrapper>
            <styled.div>
              <StyledComponent
                forwardedComponent={
                  Object {
                    "$$typeof": Symbol(react.forward_ref),
                    "attrs": Array [],
                    "componentStyle": ComponentStyle {
                      "componentId": "sc-jTzLTM",
                      "isStatic": true,
                      "lastClassName": "cuhfEz",
                      "rules": Array [
                        "
  width: 95%;
  align-self: center;
  justify-self: center;

  & > * {
    text-align: center;
  }

  ",
                        "@media (min-width: 768px)",
                        " {
    width: 550px;
  }
",
                      ],
                    },
                    "displayName": "styled.div",
                    "foldedComponentIds": Array [],
                    "render": [Function],
                    "styledComponentId": "sc-jTzLTM",
                    "target": "div",
                    "toString": [Function],
                    "warnTooManyClasses": [Function],
                    "withComponent": [Function],
                  }
                }
                forwardedRef={null}
              >
                <div
                  className="sc-jTzLTM cuhfEz"
                >
                  <h1>
                    Sign in to TMS
                  </h1>
                  <p>
                    Enter your 
                    <strong>
                      user name
                    </strong>
                     and 
                    <strong>
                      password
                    </strong>
                    .
                  </p>
                  <ReactForm
                    onSubmit={[Function]}
                  >
                    <Connect(Form)
                      onSubmit={[Function]}
                      store={
                        Object {
                          "dispatch": [Function],
                          "getState": [Function],
                          "replaceReducer": [Function],
                          "subscribe": [Function],
                          Symbol(observable): [Function],
                        }
                      }
                    >
                      <Form
                        defaultValues={Object {}}
                        dispatch={[Function]}
                        formState={
                          Object {
                            "asyncErrors": undefined,
                            "asyncSuccesses": undefined,
                            "asyncValidations": 0,
                            "asyncWarnings": undefined,
                            "errors": undefined,
                            "submits": 1,
                            "submitted": false,
                            "submitting": true,
                            "successes": undefined,
                            "touched": Object {},
                            "validating": undefined,
                            "validationFailed": undefined,
                            "validationFailures": 0,
                            "values": Object {},
                            "warnings": undefined,
                          }
                        }
                        onSubmit={[Function]}
                        preventDefault={true}
                        pure={true}
                        store={
                          Object {
                            "dispatch": [Function],
                            "getState": [Function],
                            "replaceReducer": [Function],
                            "subscribe": [Function],
                            Symbol(observable): [Function],
                          }
                        }
                        storeSubscription={
                          Subscription {
                            "listeners": Object {
                              "clear": [Function],
                              "get": [Function],
                              "notify": [Function],
                              "subscribe": [Function],
                            },
                            "onStateChange": [Function],
                            "parentSub": undefined,
                            "store": Object {
                              "dispatch": [Function],
                              "getState": [Function],
                              "replaceReducer": [Function],
                              "subscribe": [Function],
                              Symbol(observable): [Function],
                            },
                            "unsubscribe": [Function],
                          }
                        }
                      >
                        <styled.div>
                          <StyledComponent
                            forwardedComponent={
                              Object {
                                "$$typeof": Symbol(react.forward_ref),
                                "attrs": Array [],
                                "componentStyle": ComponentStyle {
                                  "componentId": "sc-bZQynM",
                                  "isStatic": false,
                                  "lastClassName": "doGPZx",
                                  "rules": Array [
                                    "
  padding: 15px;
  margin-bottom: 20px;
  border-radius: 0;
  background-color: ",
                                    [Function],
                                    ";
  box-shadow: 0 2px 2px 0 rgba(0, 0, 0, 0.16), 0 0 2px 0 rgba(0, 0, 0, 0.12);
",
                                  ],
                                },
                                "displayName": "styled.div",
                                "foldedComponentIds": Array [],
                                "render": [Function],
                                "styledComponentId": "sc-bZQynM",
                                "target": "div",
                                "toString": [Function],
                                "warnTooManyClasses": [Function],
                                "withComponent": [Function],
                              }
                            }
                            forwardedRef={null}
                          >
                            <div
                              className="sc-bZQynM doGPZx"
                            >
                              <form
                                onSubmit={[Function]}
                              >
                                <styled.div>
                                  <StyledComponent
                                    forwardedComponent={
                                      Object {
                                        "$$typeof": Symbol(react.forward_ref),
                                        "attrs": Array [],
                                        "componentStyle": ComponentStyle {
                                          "componentId": "sc-gZMcBi",
                                          "isStatic": false,
                                          "lastClassName": "djsgTb",
                                          "rules": Array [
                                            "
  font-family: ",
                                            [Function],
                                            ";
  display: block;
  padding-top: ",
                                            "21.25px",
                                            ";
  margin-bottom: ",
                                            "20px",
                                            ";
  position: relative;

  & input,
  & textarea {
    display: block;
    background-color: transparent;
    color: ",
                                            "rgba(0, 0, 0, 0.87)",
                                            ";
    border: none;
    border-bottom: 1px solid ",
                                            [Function],
                                            ";
    outline: 0;
    height: ",
                                            "26px",
                                            ";
    width: 100%;
    padding: 0;
    box-shadow: none;
    border-radius: 0;
    font-size: 100%;
    font-family: inherit;
    line-height: inherit;
    background-image: none;
    text-indent: 0.5em;

    &:focus {
      border-color: ",
                                            [Function],
                                            ";
      border-width: 2px;
    }
  }

  & > label {
    position: absolute;
    top: 0;
    display: block;
    width: 100%;
    color: ",
                                            "rgba(0, 0, 0, 0.54)",
                                            ";
    font-size: 12px;
    font-weight: 400;
    line-height: 15px;
    overflow-x: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
    text-align: left;
  }

  & input[type=\\"time\\"] {
    cursor: pointer;
  }

  /*
   * autocomplete styles in webkit browsers
   * https://css-tricks.com/snippets/css/change-autocomplete-styles-webkit-browsers/
  */
  & input:-webkit-autofill,
  & input:-webkit-autofill:hover,
  & input:-webkit-autofill:focus,
  & input:-webkit-autofill:active,
  & textarea:-webkit-autofill,
  & textarea:-webkit-autofill:hover,
  & textarea:-webkit-autofill:focus,
  & select:-webkit-autofill,
  & select:-webkit-autofill:hover,
  & select:-webkit-autofill:focus {
    box-shadow: ",
                                            [Function],
                                            ";
    -webkit-text-fill-color: ",
                                            [Function],
                                            ";
  }
",
                                          ],
                                        },
                                        "displayName": "styled.div",
                                        "foldedComponentIds": Array [],
                                        "render": [Function],
                                        "styledComponentId": "sc-gZMcBi",
                                        "target": "div",
                                        "toString": [Function],
                                        "warnTooManyClasses": [Function],
                                        "withComponent": [Function],
                                      }
                                    }
                                    forwardedRef={null}
                                  >
                                    <div
                                      className="sc-gZMcBi djsgTb"
                                    >
                                      <ConnectedField
                                        field="username"
                                        id="username"
                                        maxLength={30}
                                        placeholder="John Doe"
                                        required={true}
                                      >
                                        <Field
                                          component={[Function]}
                                          field="username"
                                          id="username"
                                          maxLength={30}
                                          placeholder="John Doe"
                                          pure={true}
                                          required={true}
                                        >
                                          <TextWrapper
                                            fieldApi={
                                              Object {
                                                "addValue": [Function],
                                                "asyncValidate": [Function],
                                                "doneValidatingField": [Function],
                                                "error": undefined,
                                                "fieldName": "username",
                                                "preValidate": [Function],
                                                "removeValue": [Function],
                                                "reset": [Function],
                                                "setError": [Function],
                                                "setSuccess": [Function],
                                                "setTouched": [Function],
                                                "setValue": [Function],
                                                "setWarning": [Function],
                                                "success": undefined,
                                                "swapValues": [Function],
                                                "touched": undefined,
                                                "validate": [Function],
                                                "validatingField": [Function],
                                                "value": undefined,
                                                "warning": undefined,
                                              }
                                            }
                                            id="username"
                                            maxLength={30}
                                            placeholder="John Doe"
                                            required={true}
                                          >
                                            <input
                                              id="username"
                                              maxLength={30}
                                              onBlur={[Function]}
                                              onChange={[Function]}
                                              placeholder="John Doe"
                                              required={true}
                                              value=""
                                            />
                                          </TextWrapper>
                                        </Field>
                                      </ConnectedField>
                                      <label
                                        htmlFor="username"
                                      >
                                        UserName
                                      </label>
                                    </div>
                                  </StyledComponent>
                                </styled.div>
                                <styled.div>
                                  <StyledComponent
                                    forwardedComponent={
                                      Object {
                                        "$$typeof": Symbol(react.forward_ref),
                                        "attrs": Array [],
                                        "componentStyle": ComponentStyle {
                                          "componentId": "sc-gZMcBi",
                                          "isStatic": false,
                                          "lastClassName": "djsgTb",
                                          "rules": Array [
                                            "
  font-family: ",
                                            [Function],
                                            ";
  display: block;
  padding-top: ",
                                            "21.25px",
                                            ";
  margin-bottom: ",
                                            "20px",
                                            ";
  position: relative;

  & input,
  & textarea {
    display: block;
    background-color: transparent;
    color: ",
                                            "rgba(0, 0, 0, 0.87)",
                                            ";
    border: none;
    border-bottom: 1px solid ",
                                            [Function],
                                            ";
    outline: 0;
    height: ",
                                            "26px",
                                            ";
    width: 100%;
    padding: 0;
    box-shadow: none;
    border-radius: 0;
    font-size: 100%;
    font-family: inherit;
    line-height: inherit;
    background-image: none;
    text-indent: 0.5em;

    &:focus {
      border-color: ",
                                            [Function],
                                            ";
      border-width: 2px;
    }
  }

  & > label {
    position: absolute;
    top: 0;
    display: block;
    width: 100%;
    color: ",
                                            "rgba(0, 0, 0, 0.54)",
                                            ";
    font-size: 12px;
    font-weight: 400;
    line-height: 15px;
    overflow-x: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
    text-align: left;
  }

  & input[type=\\"time\\"] {
    cursor: pointer;
  }

  /*
   * autocomplete styles in webkit browsers
   * https://css-tricks.com/snippets/css/change-autocomplete-styles-webkit-browsers/
  */
  & input:-webkit-autofill,
  & input:-webkit-autofill:hover,
  & input:-webkit-autofill:focus,
  & input:-webkit-autofill:active,
  & textarea:-webkit-autofill,
  & textarea:-webkit-autofill:hover,
  & textarea:-webkit-autofill:focus,
  & select:-webkit-autofill,
  & select:-webkit-autofill:hover,
  & select:-webkit-autofill:focus {
    box-shadow: ",
                                            [Function],
                                            ";
    -webkit-text-fill-color: ",
                                            [Function],
                                            ";
  }
",
                                          ],
                                        },
                                        "displayName": "styled.div",
                                        "foldedComponentIds": Array [],
                                        "render": [Function],
                                        "styledComponentId": "sc-gZMcBi",
                                        "target": "div",
                                        "toString": [Function],
                                        "warnTooManyClasses": [Function],
                                        "withComponent": [Function],
                                      }
                                    }
                                    forwardedRef={null}
                                  >
                                    <div
                                      className="sc-gZMcBi djsgTb"
                                    >
                                      <ConnectedField
                                        field="password"
                                        id="password"
                                        maxLength={30}
                                        placeholder="Your password"
                                        required={true}
                                        type="password"
                                      >
                                        <Field
                                          component={[Function]}
                                          field="password"
                                          id="password"
                                          maxLength={30}
                                          placeholder="Your password"
                                          pure={true}
                                          required={true}
                                          type="password"
                                        >
                                          <TextWrapper
                                            fieldApi={
                                              Object {
                                                "addValue": [Function],
                                                "asyncValidate": [Function],
                                                "doneValidatingField": [Function],
                                                "error": undefined,
                                                "fieldName": "password",
                                                "preValidate": [Function],
                                                "removeValue": [Function],
                                                "reset": [Function],
                                                "setError": [Function],
                                                "setSuccess": [Function],
                                                "setTouched": [Function],
                                                "setValue": [Function],
                                                "setWarning": [Function],
                                                "success": undefined,
                                                "swapValues": [Function],
                                                "touched": undefined,
                                                "validate": [Function],
                                                "validatingField": [Function],
                                                "value": undefined,
                                                "warning": undefined,
                                              }
                                            }
                                            id="password"
                                            maxLength={30}
                                            placeholder="Your password"
                                            required={true}
                                            type="password"
                                          >
                                            <input
                                              id="password"
                                              maxLength={30}
                                              onBlur={[Function]}
                                              onChange={[Function]}
                                              placeholder="Your password"
                                              required={true}
                                              type="password"
                                              value=""
                                            />
                                          </TextWrapper>
                                        </Field>
                                      </ConnectedField>
                                      <label
                                        htmlFor="password"
                                      >
                                        Password
                                      </label>
                                    </div>
                                  </StyledComponent>
                                </styled.div>
                                <Component
                                  block={true}
                                  color="primary"
                                  variant="contained"
                                >
                                  <Styled(styled.button)
                                    color="primary"
                                  >
                                    <StyledComponent
                                      color="primary"
                                      forwardedComponent={
                                        Object {
                                          "$$typeof": Symbol(react.forward_ref),
                                          "attrs": Array [],
                                          "componentStyle": ComponentStyle {
                                            "componentId": "sc-bwzfXH",
                                            "isStatic": false,
                                            "lastClassName": "fgSWaW",
                                            "rules": Array [
                                              "
  font-weight: ",
                                              "700",
                                              ";
  font-size: ",
                                              "14px",
                                              ";
  font-family: ",
                                              [Function],
                                              ";
  text-transform: uppercase;

  transition: all 0.2s ease-in-out;
  display: inline-block;
  padding: 6px 26px;
  border-radius: 4px;
  cursor: pointer;
  touch-action: manipulation;
  background-image: none;
  text-align: center;
  line-height: 36px;
  vertical-align: middle;
  white-space: nowrap;
  user-select: none;
  letter-spacing: 0.03em;
  position: relative;
  overflow: hidden;

  box-shadow: ",
                                              "rgba(0, 0, 0, 0.2) 0px 1px 5px 0px, rgba(0, 0, 0, 0.14) 0px 2px 2px 0px, rgba(0, 0, 0, 0.12) 0px 3px 1px -2px",
                                              ";
  width: ",
                                              [Function],
                                              ";

  border: ",
                                              [Function],
                                              ";

  &[disabled],
  &[disabled]:active,
  &[disabled]:focus,
  &[disabled]:hover {
    border-color: ",
                                              [Function],
                                              ";
  }

  &:active,
  &:focus,
  &:hover {
    outline: 0;
  }
",
                                              "
  color: ",
                                              [Function],
                                              ";
  background-color: ",
                                              [Function],
                                              ";

  &[disabled],
  &[disabled]:active,
  &[disabled]:focus,
  &[disabled]:hover {
    color: ",
                                              [Function],
                                              ";
    background-color: ",
                                              [Function],
                                              ";
    filter: none;
    cursor: default;
    box-shadow: ",
                                              "rgba(0, 0, 0, 0.2) 0px 1px 5px 0px, rgba(0, 0, 0, 0.14) 0px 2px 2px 0px, rgba(0, 0, 0, 0.12) 0px 3px 1px -2px",
                                              ";
  }

  &:active,
  &:focus,
  &:hover {
    background-color: ",
                                              [Function],
                                              ";
    box-shadow: ",
                                              "0 0 2px rgba(0, 0, 0, 0.12), 0 2px 2px rgba(0, 0, 0, 0.2)",
                                              ";
  }
",
                                            ],
                                          },
                                          "displayName": "Styled(styled.button)",
                                          "foldedComponentIds": Array [
                                            "sc-bdVaJa",
                                          ],
                                          "render": [Function],
                                          "styledComponentId": "sc-bwzfXH",
                                          "target": "button",
                                          "toString": [Function],
                                          "warnTooManyClasses": [Function],
                                          "withComponent": [Function],
                                        }
                                      }
                                      forwardedRef={null}
                                    >
                                      <button
                                        className="sc-bdVaJa sc-bwzfXH fgSWaW"
                                        color="primary"
                                      >
                                        Sign in
                                      </button>
                                    </StyledComponent>
                                  </Styled(styled.button)>
                                </Component>
                              </form>
                            </div>
                          </StyledComponent>
                        </styled.div>
                      </Form>
                    </Connect(Form)>
                  </ReactForm>
                </div>
              </StyledComponent>
            </styled.div>
          </main>
        </StyledComponent>
      </styled.main>
    </Component>
  </ThemeProvider>
</Component>
`;
